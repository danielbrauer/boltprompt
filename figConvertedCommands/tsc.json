{
  "Comment": "This command info is generated from fig",
  "Name": "tsc",
  "Description": "CLI tool for TypeScript compiler",
  "Arguments": [
    {
      "Arguments": [
        {
          "Name": "--all",
          "Description": "Show all compiler options",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--generateTrace",
          "Description": "Generates an event trace and a list of types",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--help",
          "Description": "Gives local information for help on the CLI",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--init",
          "Description": "Initializes a TypeScript project and creates a tsconfig.json file",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--listFilesOnly",
          "Description": "Print names of files that are part of the compilation and then stop processing",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--locale",
          "Description": "Set the language of the messaging from TypeScript. This does not affect emit",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--project",
          "Description": "Compile the project given the path to its configuration file, or to a folder with a tsconfig.json",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "path",
                  "Description": "path",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--showConfig",
          "Description": "Print the final configuration instead of building",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--version",
          "Description": "Print the compiler\u0027s version",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--build",
          "Description": "Build one or more projects and their dependencies, if out of date",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--clean",
          "Description": "Delete the outputs of all projects",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--dry",
          "Description": "Show what would be built (or deleted, if specified with \u0027--clean\u0027)",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--force",
          "Description": "Build all projects, including those that appear to be up to date",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--verbose",
          "Description": "Enable verbose logging",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--excludeDirectories",
          "Description": "Remove a list of directories from the watch process",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "dir",
                  "Description": "dir",
                  "Type": "Directory"
                }
              ]
            }
          ]
        },
        {
          "Name": "--excludeFiles",
          "Description": "Remove a list of files from the watch mode\u0027s processing",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "files",
                  "Description": "files",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--fallbackPolling",
          "Description": "Specify what approach the watcher should use if the system runs out of native file watchers",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "approach",
                  "Description": "approach",
                  "Type": "String"
                },
                {
                  "Name": "fixedPollingInterval",
                  "Description": "approach"
                },
                {
                  "Name": "priorityPollingInterval",
                  "Description": "approach"
                },
                {
                  "Name": "dynamicPriorityPolling",
                  "Description": "approach"
                }
              ]
            }
          ]
        },
        {
          "Name": "--synchronousWatchDirectory",
          "Description": "Synchronously call callbacks and update the state of directory watchers on platforms that don\u0060t support recursive watching natively",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--watch",
          "Description": "Watch input files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--watchDirectory",
          "Description": "Specify how directories are watched on systems that lack recursive file-watching functionality",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "approach",
                  "Description": "approach",
                  "Type": "String"
                },
                {
                  "Name": "fixedPollingInterval",
                  "Description": "approach"
                },
                {
                  "Name": "dynamicPriorityPolling",
                  "Description": "approach"
                },
                {
                  "Name": "useFsEvents",
                  "Description": "approach"
                }
              ]
            }
          ]
        },
        {
          "Name": "--watchFile",
          "Description": "Specify how the TypeScript watch mode works",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "approach",
                  "Description": "approach",
                  "Type": "String"
                },
                {
                  "Name": "fixedPollingInterval",
                  "Description": "approach"
                },
                {
                  "Name": "priorityPollingInterval",
                  "Description": "approach"
                },
                {
                  "Name": "dynamicPriorityPolling",
                  "Description": "approach"
                },
                {
                  "Name": "useFsEvents",
                  "Description": "approach"
                },
                {
                  "Name": "useFsEventsOnParentDirectory",
                  "Description": "approach"
                }
              ]
            }
          ]
        },
        {
          "Name": "--allowJs",
          "Description": "Allow JavaScript files to be a part of your program. Use the checkJS option to get errors from these files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--allowSyntheticDefaultImports",
          "Description": "Allow \u0027import x from y\u0027 when a module doesn\u0027t have a default export",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--allowUmdGlobalAccess",
          "Description": "Allow accessing UMD globals from modules",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--allowUnreachableCode",
          "Description": "Disable error reporting for unreachable code",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--allowUnusedLabels",
          "Description": "Disable error reporting for unused label",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--alwaysStrict",
          "Description": "Ensure \u0027use strict\u0027 is always emitted",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--assumeChangesOnlyAffectDirectDependencies",
          "Description": "Have recompiles in projects that use incremental and watch mode assume that changes within a file will only affect files directly depending on it",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--baseUrl",
          "Description": "Specify the base directory to resolve non-relative module names",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "directory",
                  "Description": "directory",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--checkJs",
          "Description": "Enable error reporting in type-checked JavaScript files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--composite",
          "Description": "Enable constraints that allow a TypeScript project to be used with project references",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--declaration",
          "Description": "Generate .d.ts files from TypeScript and JavaScript files in your project",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--declarationDir",
          "Description": "Specify the output directory for generated declaration files",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "string",
                  "Description": "string",
                  "Type": "Directory"
                }
              ]
            }
          ]
        },
        {
          "Name": "--declarationMap",
          "Description": "Create sourcemaps for d.ts files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--diagnostics",
          "Description": "Output compiler performance information after building",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--disableReferencedProjectLoad",
          "Description": "Reduce the number of projects loaded automatically by TypeScript",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--disableSizeLimit",
          "Description": "Remove the 20mb cap on total source code size for JavaScript files in the TypeScript language server",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--disableSolutionSearching",
          "Description": "Opt a project out of multi-project reference checking when editing",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--disableSourceOfProjectReferenceRedirect",
          "Description": "Disable preferring source files instead of declaration files when referencing composite projects",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--downlevelIteration",
          "Description": "Emit more compliant, but verbose and less performant JavaScript for iteration",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--emitBOM",
          "Description": "Emit a UTF-8 Byte Order Mark (BOM) in the beginning of output files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--emitDeclarationOnly",
          "Description": "Only output d.ts files and not JavaScript files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--emitDecoratorMetadata",
          "Description": "Emit design-type metadata for decorated declarations in source files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--esModuleInterop",
          "Description": "Emit additional JavaScript to ease support for importing CommonJS modules. This enables allowSyntheticDefaultImports for type compatibility",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--exactOptionalPropertyTypes",
          "Description": "Differentiate between undefined and not present when type checking",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--experimentalDecorators",
          "Description": "Enable experimental support for TC39 stage 2 draft decorators",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--explainFiles",
          "Description": "Print files read during the compilation including why it was included",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--extendedDiagnostics",
          "Description": "Output more detailed compiler performance information after building",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--forceConsistentCasingInFileNames",
          "Description": "Ensure that casing is correct in imports",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--generateCpuProfile",
          "Description": "Emit a v8 CPU profile of the compiler run for debugging",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--importHelpers",
          "Description": "Allow importing helper functions from tslib once per project, instead of including them per-file",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--importsNotUsedAsValues",
          "Description": "Specify emit/checking behavior for imports that are only used for types",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "type",
                  "Description": "type",
                  "Type": "String"
                },
                {
                  "Name": "remove",
                  "Description": "type"
                },
                {
                  "Name": "preserve",
                  "Description": "type"
                },
                {
                  "Name": "error",
                  "Description": "type"
                }
              ]
            }
          ]
        },
        {
          "Name": "--incremental",
          "Description": "Save .tsbuildinfo files to allow for incremental compilation of projects",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--inlineSourceMap",
          "Description": "Include sourcemap files inside the emitted JavaScript",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--inlineSources",
          "Description": "Include source code in the sourcemaps inside the emitted JavaScript",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--isolatedModules",
          "Description": "Ensure that each file can be safely transpiled without relying on other imports",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--jsx",
          "Description": "Specify what JSX code is generated",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "type",
                  "Description": "type",
                  "Type": "String"
                },
                {
                  "Name": "react",
                  "Description": "type"
                },
                {
                  "Name": "react-jsx",
                  "Description": "type"
                },
                {
                  "Name": "react-jsxdev",
                  "Description": "type"
                },
                {
                  "Name": "react-native",
                  "Description": "type"
                },
                {
                  "Name": "preserve",
                  "Description": "type"
                }
              ]
            }
          ]
        },
        {
          "Name": "--jsxFactory",
          "Description": "Specify the JSX factory function used when targeting React JSX emit, e.g. \u0027React.createElement\u0027 or \u0027h\u0027",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "JSX factory function",
                  "Description": "JSX factory function",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--jsxFragmentFactory",
          "Description": "Specify the JSX Fragment reference used for fragments when targeting React JSX emit e.g. \u0027React.Fragment\u0027 or \u0027Fragment\u0027",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "JSX fragment",
                  "Description": "JSX fragment",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--jsxImportSource",
          "Description": "Specify module specifier used to import the JSX factory functions when using jsx: react-jsx*",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "string",
                  "Description": "string",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--keyofStringsOnly",
          "Description": "Make keyof only return strings instead of string, numbers or symbols. Legacy option",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--lib",
          "Description": "Specify a set of bundled library declaration files that describe the target runtime environment",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "list",
                  "Description": "list",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--listEmittedFiles",
          "Description": "Print the names of emitted files after a compilation",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--listFiles",
          "Description": "Print all of the files read during the compilation",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--mapRoot",
          "Description": "Specify the location where debugger should locate map files instead of generated locations",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "string",
                  "Description": "string",
                  "Type": "Directory"
                }
              ]
            }
          ]
        },
        {
          "Name": "--maxNodeModuleJsDepth",
          "Description": "Specify the maximum folder depth used for checking JavaScript files from node_modules. Only applicable with allowJs",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "number",
                  "Description": "number",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--module",
          "Description": "Specify what module code is generated",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "module",
                  "Description": "module",
                  "Type": "String"
                },
                {
                  "Name": "ES6",
                  "Description": "module"
                },
                {
                  "Name": "ES2015",
                  "Description": "module"
                },
                {
                  "Name": "ES2020",
                  "Description": "module"
                },
                {
                  "Name": "None",
                  "Description": "module"
                },
                {
                  "Name": "UMD",
                  "Description": "module"
                },
                {
                  "Name": "AMD",
                  "Description": "module"
                },
                {
                  "Name": "System",
                  "Description": "module"
                },
                {
                  "Name": "ESNext",
                  "Description": "module"
                },
                {
                  "Name": "CommonJS",
                  "Description": "module"
                }
              ]
            }
          ]
        },
        {
          "Name": "--moduleResolution",
          "Description": "Specify how TypeScript looks up a file from a given module specifier",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "module",
                  "Description": "module",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--newLine",
          "Description": "Set the newline character for emitting files",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "character",
                  "Description": "character",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--noEmit",
          "Description": "Disable emitting file from a compilation",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noEmitHelpers",
          "Description": "Disable generating custom helper functions like __extends in compiled output",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noEmitOnError",
          "Description": "Disable emitting files if any type checking errors are reported",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noErrorTruncation",
          "Description": "Disable truncating types in error messages",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noFallthroughCasesInSwitch",
          "Description": "Enable error reporting for fallthrough cases in switch statements",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noImplicitAny",
          "Description": "Enable error reporting for expressions and declarations with an implied any type",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noImplicitOverride",
          "Description": "Ensure overriding members in derived classes are marked with an override modifier",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noImplicitReturns",
          "Description": "Enable error reporting for codepaths that do not explicitly return in a function",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noImplicitThis",
          "Description": "Enable error reporting when this is given the type any",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noImplicitUseStrict",
          "Description": "Disable adding \u0027use strict\u0027 directives in emitted JavaScript files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noLib",
          "Description": "Disable including any library files, including the default lib.d.ts",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noPropertyAccessFromIndexSignature",
          "Description": "Enforces using indexed accessors for keys declared using an indexed type",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noResolve",
          "Description": "Disallow imports, requires or \u003Creference\u003Es from expanding the number of files TypeScript should add to a project",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noStrictGenericChecks",
          "Description": "Disable strict checking of generic signatures in function types",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noUncheckedIndexedAccess",
          "Description": "Add undefined to a type when accessed using an index",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noUnusedLocals",
          "Description": "Enable error reporting when a local variables aren\u0027t read",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--noUnusedParameters",
          "Description": "Raise an error when a function parameter isn\u0027t read",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--outDir",
          "Description": "Specify an output folder for all emitted files",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "string",
                  "Description": "string",
                  "Type": "Directory"
                }
              ]
            }
          ]
        },
        {
          "Name": "--outFile",
          "Description": "Specify a file that bundles all outputs into one JavaScript file. If declaration is true, also designates a file that bundles all .d.ts output",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "string",
                  "Description": "string",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--paths",
          "Description": "Specify a set of entries that re-map imports to additional lookup locations",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "object",
                  "Description": "object",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--plugins",
          "Description": "Specify a list of language service plugins to include",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "plugins",
                  "Description": "plugins",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--preserveConstEnums",
          "Description": "Disable erasing const enum declarations in generated code",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--preserveSymlinks",
          "Description": "Disable resolving symlinks to their realpath. This correlates to the same flag in node",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--preserveWatchOutput",
          "Description": "Disable wiping the console in watch mode",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--pretty",
          "Description": "Enable color and formatting in output to make compiler errors easier to read",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--reactNamespace",
          "Description": "Specify the object invoked for createElement. This only applies when targeting react JSX emit",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "object",
                  "Description": "object",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--removeComments",
          "Description": "Disable emitting comments",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--resolveJsonModule",
          "Description": "Enable importing .json files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--rootDir",
          "Description": "Specify the root folder within your source files",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "string",
                  "Description": "string",
                  "Type": "Directory"
                }
              ]
            }
          ]
        },
        {
          "Name": "--rootDirs",
          "Description": "Allow multiple folders to be treated as one when resolving modules",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "string",
                  "Description": "string",
                  "Type": "Directory"
                }
              ]
            }
          ]
        },
        {
          "Name": "--skipDefaultLibCheck",
          "Description": "Skip type checking .d.ts files that are included with TypeScript",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--skipLibCheck",
          "Description": "Skip type checking all .d.ts files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--sourceMap",
          "Description": "Create source map files for emitted JavaScript files",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--sourceRoot",
          "Description": "Specify the root path for debuggers to find the reference source code",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "string",
                  "Description": "string",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--strict",
          "Description": "Enable all strict type checking options",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--strictBindCallApply",
          "Description": "Check that the arguments for bind, call, and apply methods match the original function",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--strictFunctionTypes",
          "Description": "When assigning functions, check to ensure parameters and the return values are subtype-compatible",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--strictNullChecks",
          "Description": "When type checking, take into account null and undefined",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--strictPropertyInitialization",
          "Description": "Check for class properties that are declared but not set in the constructor",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--stripInternal",
          "Description": "Disable emitting declarations that have @internal in their JSDoc comments",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--suppressExcessPropertyErrors",
          "Description": "Disable reporting of excess property errors during the creation of object literals",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--suppressImplicitAnyIndexErrors",
          "Description": "Suppress noImplicitAny errors when indexing objects that lack index signatures",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--target",
          "Description": "Set the JavaScript language version for emitted JavaScript and include compatible library declarations",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "String",
                  "Description": "",
                  "Type": "String"
                },
                {
                  "Name": "ES3",
                  "Description": ""
                },
                {
                  "Name": "ES5",
                  "Description": ""
                },
                {
                  "Name": "ES6",
                  "Description": ""
                },
                {
                  "Name": "ES2015",
                  "Description": ""
                },
                {
                  "Name": "ES7",
                  "Description": ""
                },
                {
                  "Name": "ES2016",
                  "Description": ""
                },
                {
                  "Name": "ES2017",
                  "Description": ""
                },
                {
                  "Name": "ES2018",
                  "Description": ""
                },
                {
                  "Name": "ES2019",
                  "Description": ""
                },
                {
                  "Name": "ES2020",
                  "Description": ""
                },
                {
                  "Name": "ESNext",
                  "Description": ""
                }
              ]
            }
          ]
        },
        {
          "Name": "--traceResolution",
          "Description": "Log paths used during the moduleResolution process",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--tsBuildInfoFile",
          "Description": "Specify the folder for .tsbuildinfo incremental compilation files",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "string",
                  "Description": "string",
                  "Type": "Directory"
                }
              ]
            }
          ]
        },
        {
          "Name": "--typeRoots",
          "Description": "Specify multiple folders that act like ./node_modules/@types",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "folders",
                  "Description": "folders",
                  "Type": "Directory"
                }
              ]
            }
          ]
        },
        {
          "Name": "--types",
          "Description": "Specify type package names to be included without being referenced in a source file",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "package names",
                  "Description": "package names",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--useDefineForClassFields",
          "Description": "Emit ECMAScript-standard-compliant class fields",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--useUnknownInCatchVariables",
          "Description": "Default catch clause variables as unknown instead of any",
          "Aliases": [],
          "Arguments": []
        }
      ],
      "Optional": true
    },
    {
      "Arguments": [
        {
          "Name": "tsc script",
          "Description": "tsc script",
          "Type": "File",
          "Extensions": [
            "ts"
          ],
          "CustomCommand": ""
        }
      ]
    }
  ]
}
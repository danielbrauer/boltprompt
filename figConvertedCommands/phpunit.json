{
  "Comment": "This command info is generated from fig",
  "Name": "phpunit",
  "Description": "The PHPUnit is a command-line test runner that can be invoked through the phpunit command",
  "Arguments": [
    {
      "Arguments": [
        {
          "Name": "--coverage-clover",
          "Description": "Generate code coverage report in Clover XML format,",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--coverage-crap4j",
          "Description": "Generate code coverage report in Crap4J XML format",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--coverage-html",
          "Description": "Generate code coverage report in HTML format",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "dir",
                  "Description": "dir",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--coverage-php",
          "Description": "Export PHP_CodeCoverage object to file",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--coverage-text",
          "Description": "Generate code coverage report in text format [default: standard output]",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--coverage-xml",
          "Description": "Generate code coverage report in PHPUnit XML format",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "dir",
                  "Description": "dir",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--coverage-cache",
          "Description": "Cache static analysis results",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "dir",
                  "Description": "dir",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--warm-coverage-cache",
          "Description": "Warm static analysis cache",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--coverage-filter",
          "Description": "Include \u003Cdir\u003E in code coverage analysis",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "dir",
                  "Description": "dir",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--path-coverage",
          "Description": "Perform path coverage analysis",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--disable-coverage-ignore",
          "Description": "Disable annotations for ignoring code coverage",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--no-coverage",
          "Description": "Ignore code coverage configuration",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--dont-report-useless-tests",
          "Description": "Do not report tests that do not test anything",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--strict-coverage",
          "Description": "Be strict about @covers annotation usage",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--strict-global-state",
          "Description": "Be strict about changes to global state",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--disallow-test-output",
          "Description": "Be strict about output during tests",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--disallow-resource-usage",
          "Description": "Be strict about resource usage during small tests",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--enforce-time-limit",
          "Description": "Enforce time limit based on test size",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--default-time-limit",
          "Description": "Timeout in seconds for tests without @small, @medium or @large",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "seconds",
                  "Description": "seconds",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--disallow-todo-tests",
          "Description": "Disallow @todo-annotated tests",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--log-junit",
          "Description": "Log test execution in JUnit XML format to file",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--log-teamcity",
          "Description": "Log test execution in TeamCity format to file",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--testdox-html",
          "Description": "Write agile documentation in HTML format to file",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--testdox-text",
          "Description": "Write agile documentation in Text format to file",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--testdox-xml",
          "Description": "Write agile documentation in HTML format to file",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--reverse-list",
          "Description": "Print defects in reverse order",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--no-logging",
          "Description": "Ignore logging configuration",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--prepend",
          "Description": "A PHP script that is included as early as possible",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--bootstrap",
          "Description": "A PHP script that is included before the tests run",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "-c",
          "Description": "Read configuration from XML file",
          "Aliases": [
            "--configuration"
          ],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--no-configuration",
          "Description": "Ignore default configuration file (phpunit.xml)",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--extensions",
          "Description": "A comma separated list of PHPUnit extensions to load",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "extensions",
                  "Description": "extensions",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--no-extensions",
          "Description": "Do not load PHPUnit extensions",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--include-path",
          "Description": "Prepend PHP\u0027s include_path with given path(s)",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "path(s)",
                  "Description": "path(s)",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "d",
          "Description": "Sets a php.ini value",
          "Type": "Flag",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "key[=value]",
                  "Description": "key[=value]",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--cache-result-file",
          "Description": "Specify result cache path and filename",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "file",
                  "Description": "file",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--generate-configuration",
          "Description": "Generate configuration file with suggested settings",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--migrate-configuration",
          "Description": "Migrate configuration file to current format",
          "Aliases": [],
          "Arguments": []
        }
      ],
      "Optional": true
    }
  ]
}
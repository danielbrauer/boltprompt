{
  "Comment": "This command info is generated from fig",
  "Name": "jq",
  "Description": "Command-line JSON processor",
  "Arguments": [
    {
      "Arguments": [
        {
          "Name": "--version",
          "Description": "Output the jq version and exit with zero",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--seq",
          "Description": "Use the application/json-seq MIME type scheme for separating JSON texts in jq\u0027s input and output",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--stream",
          "Description": "Parse the input in streaming fashion, outputting arrays of path and leaf values",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--slurp",
          "Description": "Instead of running the filter for each JSON object in the input, read the entire input stream into a large array and run the filter just once",
          "Aliases": [
            "-s"
          ],
          "Arguments": []
        },
        {
          "Name": "--raw-input",
          "Description": "Don\u0027t parse the input as JSON. Instead, each line of text is passed to the filter as a string",
          "Aliases": [
            "-R"
          ],
          "Arguments": []
        },
        {
          "Name": "--null-input",
          "Description": "Don\u0027t read any input at all! Instead, the filter is run once using null as the input",
          "Aliases": [
            "-n"
          ],
          "Arguments": []
        },
        {
          "Name": "--compact-output",
          "Description": "By default, jq pretty-prints JSON output. Using this option will result in more compact output by instead putting each JSON object on a single line",
          "Aliases": [
            "-c"
          ],
          "Arguments": []
        },
        {
          "Name": "--tab",
          "Description": "Use a tab for each indentation level instead of two spaces",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--indent",
          "Description": "Use the given number of spaces for indentation",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "n",
                  "Description": "n",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--color-output",
          "Description": "By default, jq outputs colored JSON if writing to a terminal. You can force it to produce color even if writing to a pipe or a file using -C",
          "Aliases": [
            "-C"
          ],
          "Arguments": []
        },
        {
          "Name": "--monochrome-output",
          "Description": "Disable color",
          "Aliases": [
            "-M"
          ],
          "Arguments": []
        },
        {
          "Name": "--ascii-output",
          "Description": "Jq usually outputs non-ASCII Unicode codepoints as UTF-8, even if the input specified them as escape sequences",
          "Aliases": [
            "-a"
          ],
          "Arguments": []
        },
        {
          "Name": "--unbuffered",
          "Description": "Flush the output after each JSON object is printed",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--sort-keys",
          "Description": "Output the fields of each object with the keys in sorted orde",
          "Aliases": [
            "-S"
          ],
          "Arguments": []
        },
        {
          "Name": "--raw-output",
          "Description": "If the filter\u0027s result is a string then it will be written directly to standard output rather than being formatted as a JSON string with quotes",
          "Aliases": [
            "-r"
          ],
          "Arguments": []
        },
        {
          "Name": "--join-output",
          "Description": "Like -r but jq won\u0027t print a newline after each output",
          "Aliases": [
            "-j"
          ],
          "Arguments": []
        },
        {
          "Name": "-f",
          "Description": "Read filter from the file rather than from a command line",
          "Aliases": [
            "--from-file"
          ],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "filename",
                  "Description": "filename",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "L",
          "Description": "Prepend directory to the search list for modules",
          "Type": "Flag",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "directory",
                  "Description": "directory",
                  "Type": "Directory"
                }
              ]
            }
          ]
        },
        {
          "Name": "-e",
          "Description": "Sets the exit status of jq to 0 if the last output values was neither false nor null, 1 if the last output value was either false or null, or 4 if no valid result was ever produced",
          "Aliases": [
            "--exit-status"
          ],
          "Arguments": []
        },
        {
          "Name": "--arg",
          "Description": "This option passes a value to the jq program as a predefined variable",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "name",
                  "Description": "name",
                  "Type": "String"
                }
              ]
            },
            {
              "Arguments": [
                {
                  "Name": "value",
                  "Description": "value",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--argjson",
          "Description": "This option passes a JSON-encoded value to the jq program as a predefined variable",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "name",
                  "Description": "name",
                  "Type": "String"
                }
              ]
            },
            {
              "Arguments": [
                {
                  "Name": "JSON-text",
                  "Description": "JSON-text",
                  "Type": "String"
                }
              ]
            }
          ]
        },
        {
          "Name": "--slurpfile",
          "Description": "This option reads all the JSON texts in the named file and binds an array of the parsed JSON values to the given global variable",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "variable name",
                  "Description": "variable name",
                  "Type": "String"
                }
              ]
            },
            {
              "Arguments": [
                {
                  "Name": "filename",
                  "Description": "filename",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--rawfile",
          "Description": "This option reads in the named file and binds its contents to the given global variable",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "variable name",
                  "Description": "variable name",
                  "Type": "String"
                }
              ]
            },
            {
              "Arguments": [
                {
                  "Name": "filename",
                  "Description": "filename",
                  "Type": "FileSystemEntry"
                }
              ]
            }
          ]
        },
        {
          "Name": "--args",
          "Description": "Remaining arguments are positional string arguments. These are available to the jq program as $ARGS.positional[]",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--jsonargs",
          "Description": "Remaining arguments are positional JSON text arguments. These are available to the jq program as $ARGS.positional[]",
          "Aliases": [],
          "Arguments": []
        },
        {
          "Name": "--run-tests",
          "Description": "Runs the tests in the given file or standard input. This must be the last option given and does not honor all preceding options",
          "Aliases": [],
          "Arguments": [
            {
              "Arguments": [
                {
                  "Name": "filename",
                  "Description": "filename",
                  "Type": "FileSystemEntry"
                }
              ],
              "Optional": true
            }
          ]
        }
      ],
      "Optional": true
    },
    {
      "Arguments": [
        {
          "Name": "filter",
          "Description": "filter",
          "Type": "String"
        }
      ]
    },
    {
      "Arguments": [
        {
          "Name": "files",
          "Description": "files",
          "Type": "FileSystemEntry"
        }
      ],
      "Optional": true
    }
  ]
}